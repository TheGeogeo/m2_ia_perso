analyse_degmentation_client.py

Méthode du Coude pour déterminer k :
    C'est une technique graphique utilisée pour déterminer le nombre optimal de clusters (k) dans l'algorithme K-Means.
    Elle consiste à tracer une courbe représentant la somme des carrés des distances intra-clusters (WCSS) en fonction du nombre de clusters.
    Le point où la diminution de WCSS ralentit (formant un "coude" dans le graphique) est considéré comme le nombre optimal de clusters.

Nombre de Clusters :
    Il s'agit du nombre de groupes ou segments dans lesquels les données sont divisées par l'algorithme K-Means.
    Chaque cluster regroupe des données présentant des similarités selon les variables sélectionnées pour l'analyse.
    Le choix du nombre de clusters est crucial pour assurer une segmentation pertinente et exploitable.

WCSS (Within-Cluster-Sum-of-Squares) :
    Il représente la somme des distances au carré entre chaque point et le centre de son cluster.
    Un WCSS plus faible indique des clusters compacts et bien définis.
    Dans la méthode du coude, WCSS est utilisé pour évaluer la qualité des clusters formés et aider à déterminer la valeur optimale de k.

-----------------------------------------------

prediction_churn_client.py

L'algorithme utilisé ici est Random Forest, un modèle d'apprentissage supervisé basé sur des arbres de décision. 
Il sert à effectuer des tâches de classification et de régression. 
Dans ce cas précis, il est utilisé pour prédire le churn (attrition client), c'est-à-dire déterminer si un client risque d'abandonner ou non les services de l'entreprise.

Le modèle utilise trois caractéristiques (ou features) extraites du dataset :
    Purchase_Frequency - Fréquence des achats effectués par le client.
    Average_Order_Value - Valeur moyenne des commandes passées par le client.
    Lifetime_Value - Valeur totale estimée d'un client sur toute sa durée de vie.

La variable cible (target) est calculée à partir de la colonne Churn_Probability.
    Un churn supérieur à 50 % est codé comme 1 (client susceptible de partir).
    Un churn inférieur ou égal à 50 % est codé comme 0 (client fidèle).

Explication de l'algorithme :

L'algorithme utilisé ici est Random Forest, un modèle d'apprentissage supervisé basé sur des arbres de décision. Il sert à effectuer des tâches de classification et de régression. Dans ce cas précis, il est utilisé pour prédire le churn (attrition client), c'est-à-dire déterminer si un client risque d'abandonner ou non les services de l'entreprise.
Données utilisées :

Le modèle utilise trois caractéristiques (ou features) extraites du dataset :
    Purchase_Frequency - Fréquence des achats effectués par le client.
    Average_Order_Value - Valeur moyenne des commandes passées par le client.
    Lifetime_Value - Valeur totale estimée d'un client sur toute sa durée de vie.

La variable cible (target) est calculée à partir de la colonne Churn_Probability.
    Un churn supérieur à 50 % est codé comme 1 (client susceptible de partir).
    Un churn inférieur ou égal à 50 % est codé comme 0 (client fidèle).

Prétraitement des données :
    Normalisation :
        Les caractéristiques sont normalisées avec StandardScaler pour garantir une distribution uniforme (moyenne = 0, écart-type = 1). 
        Cela améliore la performance des algorithmes sensibles aux échelles des données.

    Division des données :
        Les données sont séparées en un ensemble d'entraînement (70 %) et un ensemble de test (30 %).
        L'entraînement permet au modèle d'apprendre, tandis que l'ensemble de test sert à évaluer sa performance.

Rapport de classification :

Ce rapport fournit plusieurs métriques pour évaluer les performances du modèle :
    Accuracy (Précision globale) :
        Proportion d'échantillons correctement classés.
        Exemple : Si l'accuracy est 0.85, cela signifie que 85 % des prédictions sont correctes.

    Precision (Précision) :
        Pourcentage des prédictions positives correctes.
        Calcul : TP / (TP + FP)
        TP = Vrais positifs, FP = Faux positifs.
        Mesure la qualité des prédictions positives.

    Recall (Rappel) :
        Proportion des cas positifs correctement identifiés.
        Calcul : TP / (TP + FN)
        FN = Faux négatifs.
        Évalue la capacité du modèle à détecter les cas positifs.

    F1-Score :
        Moyenne harmonique entre précision et rappel.
        Calcul : 2 * (Precision * Recall) / (Precision + Recall)
        Fournit un équilibre entre précision et rappel, surtout lorsque les classes sont déséquilibrées.

    Support :
        Nombre total d'échantillons dans chaque classe.
        Sert à mesurer l'importance de chaque classe.

Sortie attendue :
    Scores d'évaluation affichés dans la console :
        Accuracy, matrice de confusion et rapport de classification.

    Fichier CSV des prédictions :
        Contient deux colonnes : Actual (valeurs réelles) et Predicted (valeurs prédites).

--------------------------------------------------

prevision_ventes.py

